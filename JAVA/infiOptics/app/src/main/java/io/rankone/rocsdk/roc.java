/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.rankone.rocsdk;

public class roc implements rocConstants {
  public static byte[] cdata(SWIGTYPE_p_void ptr, int nelements) {
    return rocJNI.cdata(SWIGTYPE_p_void.getCPtr(ptr), nelements);
  }

  public static void memmove(SWIGTYPE_p_void data, byte[] indata) {
    rocJNI.memmove(SWIGTYPE_p_void.getCPtr(data), indata);
  }

  public static String roc_preinitialize_android(Object arg0) {
    return rocJNI.roc_preinitialize_android(arg0);
  }

  public static SWIGTYPE_p_bool new_bool() {
    long cPtr = rocJNI.new_bool();
    return (cPtr == 0) ? null : new SWIGTYPE_p_bool(cPtr, false);
  }

  public static SWIGTYPE_p_bool copy_bool(boolean value) {
    long cPtr = rocJNI.copy_bool(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_bool(cPtr, false);
  }

  public static void delete_bool(SWIGTYPE_p_bool obj) {
    rocJNI.delete_bool(SWIGTYPE_p_bool.getCPtr(obj));
  }

  public static void bool_assign(SWIGTYPE_p_bool obj, boolean value) {
    rocJNI.bool_assign(SWIGTYPE_p_bool.getCPtr(obj), value);
  }

  public static boolean bool_value(SWIGTYPE_p_bool obj) {
    return rocJNI.bool_value(SWIGTYPE_p_bool.getCPtr(obj));
  }

  public static SWIGTYPE_p_int new_int() {
    long cPtr = rocJNI.new_int();
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static SWIGTYPE_p_int copy_int(int value) {
    long cPtr = rocJNI.copy_int(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void delete_int(SWIGTYPE_p_int obj) {
    rocJNI.delete_int(SWIGTYPE_p_int.getCPtr(obj));
  }

  public static void int_assign(SWIGTYPE_p_int obj, int value) {
    rocJNI.int_assign(SWIGTYPE_p_int.getCPtr(obj), value);
  }

  public static int int_value(SWIGTYPE_p_int obj) {
    return rocJNI.int_value(SWIGTYPE_p_int.getCPtr(obj));
  }

  public static SWIGTYPE_p_float new_float() {
    long cPtr = rocJNI.new_float();
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static SWIGTYPE_p_float copy_float(float value) {
    long cPtr = rocJNI.copy_float(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static void delete_float(SWIGTYPE_p_float obj) {
    rocJNI.delete_float(SWIGTYPE_p_float.getCPtr(obj));
  }

  public static void float_assign(SWIGTYPE_p_float obj, float value) {
    rocJNI.float_assign(SWIGTYPE_p_float.getCPtr(obj), value);
  }

  public static float float_value(SWIGTYPE_p_float obj) {
    return rocJNI.float_value(SWIGTYPE_p_float.getCPtr(obj));
  }

  public static SWIGTYPE_p_double new_double() {
    long cPtr = rocJNI.new_double();
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static SWIGTYPE_p_double copy_double(double value) {
    long cPtr = rocJNI.copy_double(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static void delete_double(SWIGTYPE_p_double obj) {
    rocJNI.delete_double(SWIGTYPE_p_double.getCPtr(obj));
  }

  public static void double_assign(SWIGTYPE_p_double obj, double value) {
    rocJNI.double_assign(SWIGTYPE_p_double.getCPtr(obj), value);
  }

  public static double double_value(SWIGTYPE_p_double obj) {
    return rocJNI.double_value(SWIGTYPE_p_double.getCPtr(obj));
  }

  public static SWIGTYPE_p_size_t new_size_t() {
    long cPtr = rocJNI.new_size_t();
    return (cPtr == 0) ? null : new SWIGTYPE_p_size_t(cPtr, false);
  }

  public static SWIGTYPE_p_size_t copy_size_t(long value) {
    long cPtr = rocJNI.copy_size_t(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_size_t(cPtr, false);
  }

  public static void delete_size_t(SWIGTYPE_p_size_t obj) {
    rocJNI.delete_size_t(SWIGTYPE_p_size_t.getCPtr(obj));
  }

  public static void size_t_assign(SWIGTYPE_p_size_t obj, long value) {
    rocJNI.size_t_assign(SWIGTYPE_p_size_t.getCPtr(obj), value);
  }

  public static long size_t_value(SWIGTYPE_p_size_t obj) {
    return rocJNI.size_t_value(SWIGTYPE_p_size_t.getCPtr(obj));
  }

  public static SWIGTYPE_p_long_long new_int64_t() {
    long cPtr = rocJNI.new_int64_t();
    return (cPtr == 0) ? null : new SWIGTYPE_p_long_long(cPtr, false);
  }

  public static SWIGTYPE_p_long_long copy_int64_t(long value) {
    long cPtr = rocJNI.copy_int64_t(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_long_long(cPtr, false);
  }

  public static void delete_int64_t(SWIGTYPE_p_long_long obj) {
    rocJNI.delete_int64_t(SWIGTYPE_p_long_long.getCPtr(obj));
  }

  public static void int64_t_assign(SWIGTYPE_p_long_long obj, long value) {
    rocJNI.int64_t_assign(SWIGTYPE_p_long_long.getCPtr(obj), value);
  }

  public static long int64_t_value(SWIGTYPE_p_long_long obj) {
    return rocJNI.int64_t_value(SWIGTYPE_p_long_long.getCPtr(obj));
  }

  public static SWIGTYPE_p_p_roc_gallery_type new_roc_gallery() {
    long cPtr = rocJNI.new_roc_gallery();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_gallery_type(cPtr, false);
  }

  public static SWIGTYPE_p_p_roc_gallery_type copy_roc_gallery(SWIGTYPE_p_roc_gallery_type value) {
    long cPtr = rocJNI.copy_roc_gallery(SWIGTYPE_p_roc_gallery_type.getCPtr(value));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_gallery_type(cPtr, false);
  }

  public static void delete_roc_gallery(SWIGTYPE_p_p_roc_gallery_type obj) {
    rocJNI.delete_roc_gallery(SWIGTYPE_p_p_roc_gallery_type.getCPtr(obj));
  }

  public static void roc_gallery_assign(SWIGTYPE_p_p_roc_gallery_type obj, SWIGTYPE_p_roc_gallery_type value) {
    rocJNI.roc_gallery_assign(SWIGTYPE_p_p_roc_gallery_type.getCPtr(obj), SWIGTYPE_p_roc_gallery_type.getCPtr(value));
  }

  public static SWIGTYPE_p_roc_gallery_type roc_gallery_value(SWIGTYPE_p_p_roc_gallery_type obj) {
    long cPtr = rocJNI.roc_gallery_value(SWIGTYPE_p_p_roc_gallery_type.getCPtr(obj));
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_gallery_type(cPtr, false);
  }

  public static SWIGTYPE_p_float new_roc_similarity() {
    long cPtr = rocJNI.new_roc_similarity();
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static SWIGTYPE_p_float copy_roc_similarity(float value) {
    long cPtr = rocJNI.copy_roc_similarity(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static void delete_roc_similarity(SWIGTYPE_p_float obj) {
    rocJNI.delete_roc_similarity(SWIGTYPE_p_float.getCPtr(obj));
  }

  public static void roc_similarity_assign(SWIGTYPE_p_float obj, float value) {
    rocJNI.roc_similarity_assign(SWIGTYPE_p_float.getCPtr(obj), value);
  }

  public static float roc_similarity_value(SWIGTYPE_p_float obj) {
    return rocJNI.roc_similarity_value(SWIGTYPE_p_float.getCPtr(obj));
  }

  public static SWIGTYPE_p_p_char new_roc_string() {
    long cPtr = rocJNI.new_roc_string();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_char(cPtr, false);
  }

  public static SWIGTYPE_p_p_char copy_roc_string(String value) {
    long cPtr = rocJNI.copy_roc_string(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_char(cPtr, false);
  }

  public static void delete_roc_string(SWIGTYPE_p_p_char obj) {
    rocJNI.delete_roc_string(SWIGTYPE_p_p_char.getCPtr(obj));
  }

  public static void roc_string_assign(SWIGTYPE_p_p_char obj, String value) {
    rocJNI.roc_string_assign(SWIGTYPE_p_p_char.getCPtr(obj), value);
  }

  public static String roc_string_value(SWIGTYPE_p_p_char obj) {
    return rocJNI.roc_string_value(SWIGTYPE_p_p_char.getCPtr(obj));
  }

  public static SWIGTYPE_p_p_unsigned_char new_roc_buffer() {
    long cPtr = rocJNI.new_roc_buffer();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_unsigned_char(cPtr, false);
  }

  public static SWIGTYPE_p_p_unsigned_char copy_roc_buffer(SWIGTYPE_p_unsigned_char value) {
    long cPtr = rocJNI.copy_roc_buffer(SWIGTYPE_p_unsigned_char.getCPtr(value));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_unsigned_char(cPtr, false);
  }

  public static void delete_roc_buffer(SWIGTYPE_p_p_unsigned_char obj) {
    rocJNI.delete_roc_buffer(SWIGTYPE_p_p_unsigned_char.getCPtr(obj));
  }

  public static void roc_buffer_assign(SWIGTYPE_p_p_unsigned_char obj, SWIGTYPE_p_unsigned_char value) {
    rocJNI.roc_buffer_assign(SWIGTYPE_p_p_unsigned_char.getCPtr(obj), SWIGTYPE_p_unsigned_char.getCPtr(value));
  }

  public static SWIGTYPE_p_unsigned_char roc_buffer_value(SWIGTYPE_p_p_unsigned_char obj) {
    long cPtr = rocJNI.roc_buffer_value(SWIGTYPE_p_p_unsigned_char.getCPtr(obj));
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_long_long new_roc_time() {
    long cPtr = rocJNI.new_roc_time();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long_long(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_long_long copy_roc_time(java.math.BigInteger value) {
    long cPtr = rocJNI.copy_roc_time(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_long_long(cPtr, false);
  }

  public static void delete_roc_time(SWIGTYPE_p_unsigned_long_long obj) {
    rocJNI.delete_roc_time(SWIGTYPE_p_unsigned_long_long.getCPtr(obj));
  }

  public static void roc_time_assign(SWIGTYPE_p_unsigned_long_long obj, java.math.BigInteger value) {
    rocJNI.roc_time_assign(SWIGTYPE_p_unsigned_long_long.getCPtr(obj), value);
  }

  public static java.math.BigInteger roc_time_value(SWIGTYPE_p_unsigned_long_long obj) {
    return rocJNI.roc_time_value(SWIGTYPE_p_unsigned_long_long.getCPtr(obj));
  }

  public static SWIGTYPE_p_p_roc_video_type new_roc_video() {
    long cPtr = rocJNI.new_roc_video();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_video_type(cPtr, false);
  }

  public static SWIGTYPE_p_p_roc_video_type copy_roc_video(SWIGTYPE_p_roc_video_type value) {
    long cPtr = rocJNI.copy_roc_video(SWIGTYPE_p_roc_video_type.getCPtr(value));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_video_type(cPtr, false);
  }

  public static void delete_roc_video(SWIGTYPE_p_p_roc_video_type obj) {
    rocJNI.delete_roc_video(SWIGTYPE_p_p_roc_video_type.getCPtr(obj));
  }

  public static void roc_video_assign(SWIGTYPE_p_p_roc_video_type obj, SWIGTYPE_p_roc_video_type value) {
    rocJNI.roc_video_assign(SWIGTYPE_p_p_roc_video_type.getCPtr(obj), SWIGTYPE_p_roc_video_type.getCPtr(value));
  }

  public static SWIGTYPE_p_roc_video_type roc_video_value(SWIGTYPE_p_p_roc_video_type obj) {
    long cPtr = rocJNI.roc_video_value(SWIGTYPE_p_p_roc_video_type.getCPtr(obj));
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_video_type(cPtr, false);
  }

  public static SWIGTYPE_p_p_roc_stream_type new_roc_stream() {
    long cPtr = rocJNI.new_roc_stream();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_stream_type(cPtr, false);
  }

  public static SWIGTYPE_p_p_roc_stream_type copy_roc_stream(SWIGTYPE_p_roc_stream_type value) {
    long cPtr = rocJNI.copy_roc_stream(SWIGTYPE_p_roc_stream_type.getCPtr(value));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_stream_type(cPtr, false);
  }

  public static void delete_roc_stream(SWIGTYPE_p_p_roc_stream_type obj) {
    rocJNI.delete_roc_stream(SWIGTYPE_p_p_roc_stream_type.getCPtr(obj));
  }

  public static void roc_stream_assign(SWIGTYPE_p_p_roc_stream_type obj, SWIGTYPE_p_roc_stream_type value) {
    rocJNI.roc_stream_assign(SWIGTYPE_p_p_roc_stream_type.getCPtr(obj), SWIGTYPE_p_roc_stream_type.getCPtr(value));
  }

  public static SWIGTYPE_p_roc_stream_type roc_stream_value(SWIGTYPE_p_p_roc_stream_type obj) {
    long cPtr = rocJNI.roc_stream_value(SWIGTYPE_p_p_roc_stream_type.getCPtr(obj));
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_stream_type(cPtr, false);
  }

  public static SWIGTYPE_p_p_roc_tracker_type new_roc_tracker() {
    long cPtr = rocJNI.new_roc_tracker();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_tracker_type(cPtr, false);
  }

  public static SWIGTYPE_p_p_roc_tracker_type copy_roc_tracker(SWIGTYPE_p_roc_tracker_type value) {
    long cPtr = rocJNI.copy_roc_tracker(SWIGTYPE_p_roc_tracker_type.getCPtr(value));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_tracker_type(cPtr, false);
  }

  public static void delete_roc_tracker(SWIGTYPE_p_p_roc_tracker_type obj) {
    rocJNI.delete_roc_tracker(SWIGTYPE_p_p_roc_tracker_type.getCPtr(obj));
  }

  public static void roc_tracker_assign(SWIGTYPE_p_p_roc_tracker_type obj, SWIGTYPE_p_roc_tracker_type value) {
    rocJNI.roc_tracker_assign(SWIGTYPE_p_p_roc_tracker_type.getCPtr(obj), SWIGTYPE_p_roc_tracker_type.getCPtr(value));
  }

  public static SWIGTYPE_p_roc_tracker_type roc_tracker_value(SWIGTYPE_p_p_roc_tracker_type obj) {
    long cPtr = rocJNI.roc_tracker_value(SWIGTYPE_p_p_roc_tracker_type.getCPtr(obj));
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_tracker_type(cPtr, false);
  }

  public static SWIGTYPE_p_p_roc_database_type new_roc_database() {
    long cPtr = rocJNI.new_roc_database();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_database_type(cPtr, false);
  }

  public static SWIGTYPE_p_p_roc_database_type copy_roc_database(SWIGTYPE_p_roc_database_type value) {
    long cPtr = rocJNI.copy_roc_database(SWIGTYPE_p_roc_database_type.getCPtr(value));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_database_type(cPtr, false);
  }

  public static void delete_roc_database(SWIGTYPE_p_p_roc_database_type obj) {
    rocJNI.delete_roc_database(SWIGTYPE_p_p_roc_database_type.getCPtr(obj));
  }

  public static void roc_database_assign(SWIGTYPE_p_p_roc_database_type obj, SWIGTYPE_p_roc_database_type value) {
    rocJNI.roc_database_assign(SWIGTYPE_p_p_roc_database_type.getCPtr(obj), SWIGTYPE_p_roc_database_type.getCPtr(value));
  }

  public static SWIGTYPE_p_roc_database_type roc_database_value(SWIGTYPE_p_p_roc_database_type obj) {
    long cPtr = rocJNI.roc_database_value(SWIGTYPE_p_p_roc_database_type.getCPtr(obj));
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_database_type(cPtr, false);
  }

  public static SWIGTYPE_p_roc_algorithm_options new_roc_algorithm_options() {
    long cPtr = rocJNI.new_roc_algorithm_options();
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_algorithm_options(cPtr, false);
  }

  public static SWIGTYPE_p_roc_algorithm_options copy_roc_algorithm_options(int value) {
    long cPtr = rocJNI.copy_roc_algorithm_options(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_algorithm_options(cPtr, false);
  }

  public static void delete_roc_algorithm_options(SWIGTYPE_p_roc_algorithm_options obj) {
    rocJNI.delete_roc_algorithm_options(SWIGTYPE_p_roc_algorithm_options.getCPtr(obj));
  }

  public static void roc_algorithm_options_assign(SWIGTYPE_p_roc_algorithm_options obj, int value) {
    rocJNI.roc_algorithm_options_assign(SWIGTYPE_p_roc_algorithm_options.getCPtr(obj), value);
  }

  public static int roc_algorithm_options_value(SWIGTYPE_p_roc_algorithm_options obj) {
    return rocJNI.roc_algorithm_options_value(SWIGTYPE_p_roc_algorithm_options.getCPtr(obj));
  }

  public static SWIGTYPE_p_p_roc_server_type new_roc_server() {
    long cPtr = rocJNI.new_roc_server();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_server_type(cPtr, false);
  }

  public static SWIGTYPE_p_p_roc_server_type copy_roc_server(SWIGTYPE_p_roc_server_type value) {
    long cPtr = rocJNI.copy_roc_server(SWIGTYPE_p_roc_server_type.getCPtr(value));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_server_type(cPtr, false);
  }

  public static void delete_roc_server(SWIGTYPE_p_p_roc_server_type obj) {
    rocJNI.delete_roc_server(SWIGTYPE_p_p_roc_server_type.getCPtr(obj));
  }

  public static void roc_server_assign(SWIGTYPE_p_p_roc_server_type obj, SWIGTYPE_p_roc_server_type value) {
    rocJNI.roc_server_assign(SWIGTYPE_p_p_roc_server_type.getCPtr(obj), SWIGTYPE_p_roc_server_type.getCPtr(value));
  }

  public static SWIGTYPE_p_roc_server_type roc_server_value(SWIGTYPE_p_p_roc_server_type obj) {
    long cPtr = rocJNI.roc_server_value(SWIGTYPE_p_p_roc_server_type.getCPtr(obj));
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_server_type(cPtr, false);
  }

  public static SWIGTYPE_p_p_roc_template_pipe_type new_roc_template_pipe() {
    long cPtr = rocJNI.new_roc_template_pipe();
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_template_pipe_type(cPtr, false);
  }

  public static SWIGTYPE_p_p_roc_template_pipe_type copy_roc_template_pipe(roc_template_pipe_type value) {
    long cPtr = rocJNI.copy_roc_template_pipe(roc_template_pipe_type.getCPtr(value), value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_roc_template_pipe_type(cPtr, false);
  }

  public static void delete_roc_template_pipe(SWIGTYPE_p_p_roc_template_pipe_type obj) {
    rocJNI.delete_roc_template_pipe(SWIGTYPE_p_p_roc_template_pipe_type.getCPtr(obj));
  }

  public static void roc_template_pipe_assign(SWIGTYPE_p_p_roc_template_pipe_type obj, roc_template_pipe_type value) {
    rocJNI.roc_template_pipe_assign(SWIGTYPE_p_p_roc_template_pipe_type.getCPtr(obj), roc_template_pipe_type.getCPtr(value), value);
  }

  public static roc_template_pipe_type roc_template_pipe_value(SWIGTYPE_p_p_roc_template_pipe_type obj) {
    long cPtr = rocJNI.roc_template_pipe_value(SWIGTYPE_p_p_roc_template_pipe_type.getCPtr(obj));
    return (cPtr == 0) ? null : new roc_template_pipe_type(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_char new_uint8_t_array(int nelements) {
    long cPtr = rocJNI.new_uint8_t_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static void delete_uint8_t_array(SWIGTYPE_p_unsigned_char ary) {
    rocJNI.delete_uint8_t_array(SWIGTYPE_p_unsigned_char.getCPtr(ary));
  }

  public static short uint8_t_array_getitem(SWIGTYPE_p_unsigned_char ary, int index) {
    return rocJNI.uint8_t_array_getitem(SWIGTYPE_p_unsigned_char.getCPtr(ary), index);
  }

  public static void uint8_t_array_setitem(SWIGTYPE_p_unsigned_char ary, int index, short value) {
    rocJNI.uint8_t_array_setitem(SWIGTYPE_p_unsigned_char.getCPtr(ary), index, value);
  }

  public static roc_template new_roc_template_array(int nelements) {
    long cPtr = rocJNI.new_roc_template_array(nelements);
    return (cPtr == 0) ? null : new roc_template(cPtr, false);
  }

  public static void delete_roc_template_array(roc_template ary) {
    rocJNI.delete_roc_template_array(roc_template.getCPtr(ary), ary);
  }

  public static roc_template roc_template_array_getitem(roc_template ary, int index) {
    return new roc_template(rocJNI.roc_template_array_getitem(roc_template.getCPtr(ary), ary, index), true);
  }

  public static void roc_template_array_setitem(roc_template ary, int index, roc_template value) {
    rocJNI.roc_template_array_setitem(roc_template.getCPtr(ary), ary, index, roc_template.getCPtr(value), value);
  }

  public static SWIGTYPE_p_float new_roc_similarity_array(int nelements) {
    long cPtr = rocJNI.new_roc_similarity_array(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static void delete_roc_similarity_array(SWIGTYPE_p_float ary) {
    rocJNI.delete_roc_similarity_array(SWIGTYPE_p_float.getCPtr(ary));
  }

  public static float roc_similarity_array_getitem(SWIGTYPE_p_float ary, int index) {
    return rocJNI.roc_similarity_array_getitem(SWIGTYPE_p_float.getCPtr(ary), index);
  }

  public static void roc_similarity_array_setitem(SWIGTYPE_p_float ary, int index, float value) {
    rocJNI.roc_similarity_array_setitem(SWIGTYPE_p_float.getCPtr(ary), index, value);
  }

  public static roc_candidate new_roc_candidate_array(int nelements) {
    long cPtr = rocJNI.new_roc_candidate_array(nelements);
    return (cPtr == 0) ? null : new roc_candidate(cPtr, false);
  }

  public static void delete_roc_candidate_array(roc_candidate ary) {
    rocJNI.delete_roc_candidate_array(roc_candidate.getCPtr(ary), ary);
  }

  public static roc_candidate roc_candidate_array_getitem(roc_candidate ary, int index) {
    return new roc_candidate(rocJNI.roc_candidate_array_getitem(roc_candidate.getCPtr(ary), ary, index), true);
  }

  public static void roc_candidate_array_setitem(roc_candidate ary, int index, roc_candidate value) {
    rocJNI.roc_candidate_array_setitem(roc_candidate.getCPtr(ary), ary, index, roc_candidate.getCPtr(value), value);
  }

  public static roc_uuid new_roc_person_id_array(int nelements) {
    long cPtr = rocJNI.new_roc_person_id_array(nelements);
    return (cPtr == 0) ? null : new roc_uuid(cPtr, false);
  }

  public static void delete_roc_person_id_array(roc_uuid ary) {
    rocJNI.delete_roc_person_id_array(roc_uuid.getCPtr(ary), ary);
  }

  public static roc_uuid roc_person_id_array_getitem(roc_uuid ary, int index) {
    return new roc_uuid(rocJNI.roc_person_id_array_getitem(roc_uuid.getCPtr(ary), ary, index), true);
  }

  public static void roc_person_id_array_setitem(roc_uuid ary, int index, roc_uuid value) {
    rocJNI.roc_person_id_array_setitem(roc_uuid.getCPtr(ary), ary, index, roc_uuid.getCPtr(value), value);
  }

  public static roc_detection new_roc_detection_array(int nelements) {
    long cPtr = rocJNI.new_roc_detection_array(nelements);
    return (cPtr == 0) ? null : new roc_detection(cPtr, false);
  }

  public static void delete_roc_detection_array(roc_detection ary) {
    rocJNI.delete_roc_detection_array(roc_detection.getCPtr(ary), ary);
  }

  public static roc_detection roc_detection_array_getitem(roc_detection ary, int index) {
    return new roc_detection(rocJNI.roc_detection_array_getitem(roc_detection.getCPtr(ary), ary, index), true);
  }

  public static void roc_detection_array_setitem(roc_detection ary, int index, roc_detection value) {
    rocJNI.roc_detection_array_setitem(roc_detection.getCPtr(ary), ary, index, roc_detection.getCPtr(value), value);
  }

  public static roc_embedded_landmark new_roc_embedded_landmark_array(int nelements) {
    long cPtr = rocJNI.new_roc_embedded_landmark_array(nelements);
    return (cPtr == 0) ? null : new roc_embedded_landmark(cPtr, false);
  }

  public static void delete_roc_embedded_landmark_array(roc_embedded_landmark ary) {
    rocJNI.delete_roc_embedded_landmark_array(roc_embedded_landmark.getCPtr(ary), ary);
  }

  public static roc_embedded_landmark roc_embedded_landmark_array_getitem(roc_embedded_landmark ary, int index) {
    return new roc_embedded_landmark(rocJNI.roc_embedded_landmark_array_getitem(roc_embedded_landmark.getCPtr(ary), ary, index), true);
  }

  public static void roc_embedded_landmark_array_setitem(roc_embedded_landmark ary, int index, roc_embedded_landmark value) {
    rocJNI.roc_embedded_landmark_array_setitem(roc_embedded_landmark.getCPtr(ary), ary, index, roc_embedded_landmark.getCPtr(value), value);
  }

  public static roc_adjudication new_roc_adjudication_array(int nelements) {
    long cPtr = rocJNI.new_roc_adjudication_array(nelements);
    return (cPtr == 0) ? null : new roc_adjudication(cPtr, false);
  }

  public static void delete_roc_adjudication_array(roc_adjudication ary) {
    rocJNI.delete_roc_adjudication_array(roc_adjudication.getCPtr(ary), ary);
  }

  public static roc_adjudication roc_adjudication_array_getitem(roc_adjudication ary, int index) {
    return new roc_adjudication(rocJNI.roc_adjudication_array_getitem(roc_adjudication.getCPtr(ary), ary, index), true);
  }

  public static void roc_adjudication_array_setitem(roc_adjudication ary, int index, roc_adjudication value) {
    rocJNI.roc_adjudication_array_setitem(roc_adjudication.getCPtr(ary), ary, index, roc_adjudication.getCPtr(value), value);
  }

  public static int roc_version_major() {
    return rocJNI.roc_version_major();
  }

  public static int roc_version_minor() {
    return rocJNI.roc_version_minor();
  }

  public static int roc_version_patch() {
    return rocJNI.roc_version_patch();
  }

  public static String roc_version_string() {
    return rocJNI.roc_version_string();
  }

  public static String roc_copyright() {
    return rocJNI.roc_copyright();
  }

  public static void roc_ensure(String error) {
    rocJNI.roc_ensure(error);
  }

  public static String roc_set_logging(boolean stdout_, String filename, SWIGTYPE_p_f_p_q_const__char__void callback) {
    return rocJNI.roc_set_logging(stdout_, filename, SWIGTYPE_p_f_p_q_const__char__void.getCPtr(callback));
  }

  public static boolean roc_log(String message) {
    return rocJNI.roc_log(message);
  }

  public static long qHash(roc_uuid a) {
    return rocJNI.qHash(roc_uuid.getCPtr(a), a);
  }

  public static roc_uuid roc_uuid_from_bytes(byte[] input_byte_array, long length) {
    return new roc_uuid(rocJNI.roc_uuid_from_bytes(input_byte_array, length), true);
  }

  public static roc_uuid roc_uuid_from_int(java.math.BigInteger val) {
    return new roc_uuid(rocJNI.roc_uuid_from_int(val), true);
  }

  public static java.math.BigInteger roc_uuid_to_int(roc_uuid uuid) {
    return rocJNI.roc_uuid_to_int(roc_uuid.getCPtr(uuid), uuid);
  }

  public static roc_uuid roc_uuid_get_null() {
    return new roc_uuid(rocJNI.roc_uuid_get_null(), true);
  }

  public static boolean roc_uuid_is_null(roc_uuid uuid) {
    return rocJNI.roc_uuid_is_null(roc_uuid.getCPtr(uuid), uuid);
  }

  public static boolean roc_uuid_is_equal(roc_uuid a, roc_uuid b) {
    return rocJNI.roc_uuid_is_equal(roc_uuid.getCPtr(a), a, roc_uuid.getCPtr(b), b);
  }

  public static boolean roc_uuid_is_less_than(roc_uuid a, roc_uuid b) {
    return rocJNI.roc_uuid_is_less_than(roc_uuid.getCPtr(a), a, roc_uuid.getCPtr(b), b);
  }

  public static roc_hash roc_hash_from_bytes(byte[] input_byte_array, long length) {
    return new roc_hash(rocJNI.roc_hash_from_bytes(input_byte_array, length), true);
  }

  public static roc_hash roc_hash_get_null() {
    return new roc_hash(rocJNI.roc_hash_get_null(), true);
  }

  public static boolean roc_hash_is_null(roc_hash hash) {
    return rocJNI.roc_hash_is_null(roc_hash.getCPtr(hash), hash);
  }

  public static boolean roc_hash_is_equal(roc_hash a, roc_hash b) {
    return rocJNI.roc_hash_is_equal(roc_hash.getCPtr(a), a, roc_hash.getCPtr(b), b);
  }

  public static boolean roc_hash_is_less_than(roc_hash a, roc_hash b) {
    return rocJNI.roc_hash_is_less_than(roc_hash.getCPtr(a), a, roc_hash.getCPtr(b), b);
  }

  public static roc_hash roc_hash_from_uuid(roc_uuid uuid) {
    return new roc_hash(rocJNI.roc_hash_from_uuid(roc_uuid.getCPtr(uuid), uuid), true);
  }

  public static roc_uuid roc_hash_to_uuid(roc_hash hash) {
    return new roc_uuid(rocJNI.roc_hash_to_uuid(roc_hash.getCPtr(hash), hash), true);
  }

  public static String roc_new_image(long width, long height, long step, int color_space, roc_hash media_id, java.math.BigInteger timestamp, byte[] input_byte_array, roc_image image) {
    return rocJNI.roc_new_image(width, height, step, color_space, roc_hash.getCPtr(media_id), media_id, timestamp, input_byte_array, roc_image.getCPtr(image), image);
  }

  public static String roc_copy_image(roc_image src, roc_image dst) {
    return rocJNI.roc_copy_image(roc_image.getCPtr(src), src, roc_image.getCPtr(dst), dst);
  }

  public static String roc_rotate(roc_image image, int degrees) {
    return rocJNI.roc_rotate(roc_image.getCPtr(image), image, degrees);
  }

  public static String roc_swap_channels(roc_image image) {
    return rocJNI.roc_swap_channels(roc_image.getCPtr(image), image);
  }

  public static String roc_bgr2gray(roc_image src, roc_image dst) {
    return rocJNI.roc_bgr2gray(roc_image.getCPtr(src), src, roc_image.getCPtr(dst), dst);
  }

  public static String roc_to_rgba(roc_image src, byte[] output_byte_array) {
    return rocJNI.roc_to_rgba(roc_image.getCPtr(src), src, output_byte_array);
  }

  public static String roc_from_rgba(byte[] input_byte_array, long width, long height, long step, roc_image image) {
    return rocJNI.roc_from_rgba(input_byte_array, width, height, step, roc_image.getCPtr(image), image);
  }

  public static String roc_from_bgra(byte[] input_byte_array, long width, long height, long step, roc_image image) {
    return rocJNI.roc_from_bgra(input_byte_array, width, height, step, roc_image.getCPtr(image), image);
  }

  public static String roc_from_yuv(byte[] y_in, byte[] u_in, byte[] v_in, long y_row_stride, long uv_row_stride, long uv_pixel_stride, long width, long height, roc_image image) {
    return rocJNI.roc_from_yuv(y_in, u_in, v_in, y_row_stride, uv_row_stride, uv_pixel_stride, width, height, roc_image.getCPtr(image), image);
  }

  public static String roc_read_ppm(String file_name, roc_image image) {
    return rocJNI.roc_read_ppm(file_name, roc_image.getCPtr(image), image);
  }

  public static String roc_write_ppm(String file_name, roc_image image) {
    return rocJNI.roc_write_ppm(file_name, roc_image.getCPtr(image), image);
  }

  public static String roc_free_image(roc_image image) {
    return rocJNI.roc_free_image(roc_image.getCPtr(image), image);
  }

  public static String roc_set_string(String src, SWIGTYPE_p_p_char dst) {
    return rocJNI.roc_set_string(src, SWIGTYPE_p_p_char.getCPtr(dst));
  }

  public static String roc_free_string(SWIGTYPE_p_p_char str) {
    return rocJNI.roc_free_string(SWIGTYPE_p_p_char.getCPtr(str));
  }

  public static String roc_free_buffer(SWIGTYPE_p_p_unsigned_char buffer) {
    return rocJNI.roc_free_buffer(SWIGTYPE_p_p_unsigned_char.getCPtr(buffer));
  }

  public static String roc_pose_to_string(long pose) {
    return rocJNI.roc_pose_to_string(pose);
  }

  public static String roc_adaptive_minimum_size(long image_width, long image_height, float relative_min_size, long absolute_min_size, SWIGTYPE_p_size_t adaptive_min_size) {
    return rocJNI.roc_adaptive_minimum_size(image_width, image_height, relative_min_size, absolute_min_size, SWIGTYPE_p_size_t.getCPtr(adaptive_min_size));
  }

  public static String roc_algorithm_option_to_string(int algorithm_option, SWIGTYPE_p_p_char str) {
    return rocJNI.roc_algorithm_option_to_string(algorithm_option, SWIGTYPE_p_p_char.getCPtr(str));
  }

  public static String roc_algorithm_option_from_string(String str, SWIGTYPE_p_roc_algorithm_options algorithm_option) {
    return rocJNI.roc_algorithm_option_from_string(str, SWIGTYPE_p_roc_algorithm_options.getCPtr(algorithm_option));
  }

  public static String roc_check_template_version(long algorithm_id) {
    return rocJNI.roc_check_template_version(algorithm_id);
  }

  public static long getRoc_template_header_size() {
    return rocJNI.roc_template_header_size_get();
  }

  public static String roc_free_template(roc_template template_) {
    return rocJNI.roc_free_template(roc_template.getCPtr(template_), template_);
  }

  public static String roc_copy_template(roc_template src, roc_template dst) {
    return rocJNI.roc_copy_template(roc_template.getCPtr(src), src, roc_template.getCPtr(dst), dst);
  }

  public static String roc_flatten(roc_template template_, byte[] output_byte_array) {
    return rocJNI.roc_flatten(roc_template.getCPtr(template_), template_, output_byte_array);
  }

  public static String roc_unflatten(byte[] input_byte_array, roc_template template_) {
    return rocJNI.roc_unflatten(input_byte_array, roc_template.getCPtr(template_), template_);
  }

  public static String roc_flattened_bytes(roc_template template_, SWIGTYPE_p_size_t bytes) {
    return rocJNI.roc_flattened_bytes(roc_template.getCPtr(template_), template_, SWIGTYPE_p_size_t.getCPtr(bytes));
  }

  public static SWIGTYPE_p_void roc_cast(SWIGTYPE_p_unsigned_char pointer) {
    long cPtr = rocJNI.roc_cast(SWIGTYPE_p_unsigned_char.getCPtr(pointer));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static String roc_fuse(SWIGTYPE_p_float raw, long n, SWIGTYPE_p_float fused) {
    return rocJNI.roc_fuse(SWIGTYPE_p_float.getCPtr(raw), n, SWIGTYPE_p_float.getCPtr(fused));
  }

  public static String roc_enable_openmp(boolean enabled) {
    return rocJNI.roc_enable_openmp(enabled);
  }

  public static int roc_embedded_initialize(String license_file) {
    return rocJNI.roc_embedded_initialize(license_file);
  }

  public static int roc_embedded_finalize() {
    return rocJNI.roc_embedded_finalize();
  }

  public static String roc_embedded_error_to_string(int error) {
    return rocJNI.roc_embedded_error_to_string(error);
  }

  public static int roc_embedded_detect_faces(roc_image image, long min_size, int k, float false_detection_rate, SWIGTYPE_p_size_t n, roc_detection detections) {
    return rocJNI.roc_embedded_detect_faces(roc_image.getCPtr(image), image, min_size, k, false_detection_rate, SWIGTYPE_p_size_t.getCPtr(n), roc_detection.getCPtr(detections), detections);
  }

  public static String roc_landmarks_to_detection(roc_embedded_landmark right_eye, roc_embedded_landmark left_eye, roc_embedded_landmark chin, roc_detection detection) {
    return rocJNI.roc_landmarks_to_detection(roc_embedded_landmark.getCPtr(right_eye), right_eye, roc_embedded_landmark.getCPtr(left_eye), left_eye, roc_embedded_landmark.getCPtr(chin), chin, roc_detection.getCPtr(detection), detection);
  }

  public static int roc_embedded_landmark_face(roc_image image, roc_detection detection, roc_embedded_landmark landmarks, roc_embedded_landmark right_eye, roc_embedded_landmark left_eye, roc_embedded_landmark chin, SWIGTYPE_p_float pitch, SWIGTYPE_p_float yaw) {
    return rocJNI.roc_embedded_landmark_face(roc_image.getCPtr(image), image, roc_detection.getCPtr(detection), detection, roc_embedded_landmark.getCPtr(landmarks), landmarks, roc_embedded_landmark.getCPtr(right_eye), right_eye, roc_embedded_landmark.getCPtr(left_eye), left_eye, roc_embedded_landmark.getCPtr(chin), chin, SWIGTYPE_p_float.getCPtr(pitch), SWIGTYPE_p_float.getCPtr(yaw));
  }

  public static int roc_embedded_liveness(roc_image image, roc_embedded_landmark landmarks, boolean fixed_focus, SWIGTYPE_p_float spoof) {
    return rocJNI.roc_embedded_liveness(roc_image.getCPtr(image), image, roc_embedded_landmark.getCPtr(landmarks), landmarks, fixed_focus, SWIGTYPE_p_float.getCPtr(spoof));
  }

  public static int roc_embedded_represent_face(roc_image image, roc_detection detection, roc_embedded_landmark right_eye, roc_embedded_landmark left_eye, roc_embedded_landmark chin, SWIGTYPE_p_unsigned_char feature_vector, SWIGTYPE_p_float quality, SWIGTYPE_p_float age, SWIGTYPE_p_float facial_hair, roc_embedded_gender gender, roc_embedded_geographic_origin geographic_origin, roc_embedded_emotion emotion, roc_embedded_artwork artwork, roc_embedded_glasses glasses, roc_embedded_mask mask) {
    return rocJNI.roc_embedded_represent_face(roc_image.getCPtr(image), image, roc_detection.getCPtr(detection), detection, roc_embedded_landmark.getCPtr(right_eye), right_eye, roc_embedded_landmark.getCPtr(left_eye), left_eye, roc_embedded_landmark.getCPtr(chin), chin, SWIGTYPE_p_unsigned_char.getCPtr(feature_vector), SWIGTYPE_p_float.getCPtr(quality), SWIGTYPE_p_float.getCPtr(age), SWIGTYPE_p_float.getCPtr(facial_hair), roc_embedded_gender.getCPtr(gender), gender, roc_embedded_geographic_origin.getCPtr(geographic_origin), geographic_origin, roc_embedded_emotion.getCPtr(emotion), emotion, roc_embedded_artwork.getCPtr(artwork), artwork, roc_embedded_glasses.getCPtr(glasses), glasses, roc_embedded_mask.getCPtr(mask), mask);
  }

  public static float roc_embedded_compare_templates(SWIGTYPE_p_unsigned_char a, long a_size, SWIGTYPE_p_unsigned_char b, long b_size) {
    return rocJNI.roc_embedded_compare_templates(SWIGTYPE_p_unsigned_char.getCPtr(a), a_size, SWIGTYPE_p_unsigned_char.getCPtr(b), b_size);
  }

  public static void roc_embedded_array_initialize(roc_embedded_array array, int element_size) {
    rocJNI.roc_embedded_array_initialize(roc_embedded_array.getCPtr(array), array, element_size);
  }

  public static int roc_embedded_array_append(roc_embedded_array array, SWIGTYPE_p_void element) {
    return rocJNI.roc_embedded_array_append(roc_embedded_array.getCPtr(array), array, SWIGTYPE_p_void.getCPtr(element));
  }

  public static void roc_embedded_array_get(roc_embedded_array array, int index, SWIGTYPE_p_void element) {
    rocJNI.roc_embedded_array_get(roc_embedded_array.getCPtr(array), array, index, SWIGTYPE_p_void.getCPtr(element));
  }

  public static void roc_embedded_array_free(roc_embedded_array array) {
    rocJNI.roc_embedded_array_free(roc_embedded_array.getCPtr(array), array);
  }

  public static long roc_embedded_checksum(SWIGTYPE_p_unsigned_char data, int size) {
    return rocJNI.roc_embedded_checksum(SWIGTYPE_p_unsigned_char.getCPtr(data), size);
  }

  public static String roc_initialize(String license_file, String log_file) {
    return rocJNI.roc_initialize(license_file, log_file);
  }

  public static String roc_set_floating_license_server(String hostname) {
    return rocJNI.roc_set_floating_license_server(hostname);
  }

  public static String roc_start_license_server(int port) {
    return rocJNI.roc_start_license_server(port);
  }

  public static String roc_stop_license_server() {
    return rocJNI.roc_stop_license_server();
  }

  public static String roc_enable_cuda(boolean enabled) {
    return rocJNI.roc_enable_cuda(enabled);
  }

  public static String roc_finalize() {
    return rocJNI.roc_finalize();
  }

  public static String roc_get_host_id(SWIGTYPE_p_p_char host_id) {
    return rocJNI.roc_get_host_id(SWIGTYPE_p_p_char.getCPtr(host_id));
  }

  public static String roc_get_hostname(SWIGTYPE_p_p_char hostname) {
    return rocJNI.roc_get_hostname(SWIGTYPE_p_p_char.getCPtr(hostname));
  }

  public static String roc_get_application_certificate(SWIGTYPE_p_p_char app_cert) {
    return rocJNI.roc_get_application_certificate(SWIGTYPE_p_p_char.getCPtr(app_cert));
  }

  public static String roc_get_license_term(int license_term, SWIGTYPE_p_bool enabled) {
    return rocJNI.roc_get_license_term(license_term, SWIGTYPE_p_bool.getCPtr(enabled));
  }

  public static String roc_get_thread_limit(SWIGTYPE_p_int limit) {
    return rocJNI.roc_get_thread_limit(SWIGTYPE_p_int.getCPtr(limit));
  }

  public static String roc_set_thread_limit(int limit) {
    return rocJNI.roc_set_thread_limit(limit);
  }

  public static String roc_get_floating_license_limit(SWIGTYPE_p_unsigned_int clients_remaining, SWIGTYPE_p_unsigned_long_long comparisons_remaining) {
    return rocJNI.roc_get_floating_license_limit(SWIGTYPE_p_unsigned_int.getCPtr(clients_remaining), SWIGTYPE_p_unsigned_long_long.getCPtr(comparisons_remaining));
  }

  public static roc_uuid_string roc_uuid_to_string(roc_uuid uuid) {
    return new roc_uuid_string(rocJNI.roc_uuid_to_string(roc_uuid.getCPtr(uuid), uuid), true);
  }

  public static String roc_uuid_string_cast(roc_uuid_string uuid) {
    return rocJNI.roc_uuid_string_cast(roc_uuid_string.getCPtr(uuid), uuid);
  }

  public static roc_uuid roc_uuid_from_string(String str) {
    return new roc_uuid(rocJNI.roc_uuid_from_string(str), true);
  }

  public static roc_uuid roc_uuid_get_random() {
    return new roc_uuid(rocJNI.roc_uuid_get_random(), true);
  }

  public static roc_hash_string roc_hash_to_string(roc_hash hash) {
    return new roc_hash_string(rocJNI.roc_hash_to_string(roc_hash.getCPtr(hash), hash), true);
  }

  public static String roc_hash_string_cast(roc_hash_string hash) {
    return rocJNI.roc_hash_string_cast(roc_hash_string.getCPtr(hash), hash);
  }

  public static roc_hash roc_hash_from_string(String str) {
    return new roc_hash(rocJNI.roc_hash_from_string(str), true);
  }

  public static roc_hash roc_hash_calc_sha1(byte[] input_byte_array, long length) {
    return new roc_hash(rocJNI.roc_hash_calc_sha1(input_byte_array, length), true);
  }

  public static roc_hash roc_hash_calc_sha1_file(String file_path) {
    return new roc_hash(rocJNI.roc_hash_calc_sha1_file(file_path), true);
  }

  public static String roc_read_image(String file_name, int color_space, roc_image image) {
    return rocJNI.roc_read_image(file_name, color_space, roc_image.getCPtr(image), image);
  }

  public static String roc_read_image_w(SWIGTYPE_p_wchar_t file_name, int color_space, roc_image image) {
    return rocJNI.roc_read_image_w(SWIGTYPE_p_wchar_t.getCPtr(file_name), color_space, roc_image.getCPtr(image), image);
  }

  public static String roc_write_image(roc_image image, String file_name) {
    return rocJNI.roc_write_image(roc_image.getCPtr(image), image, file_name);
  }

  public static String roc_decode_image(long len, SWIGTYPE_p_unsigned_char data, int color_space, roc_image image) {
    return rocJNI.roc_decode_image(len, SWIGTYPE_p_unsigned_char.getCPtr(data), color_space, roc_image.getCPtr(image), image);
  }

  public static String roc_decode_image_native(long len, byte[] input_byte_array, int color_space, roc_image image) {
    return rocJNI.roc_decode_image_native(len, input_byte_array, color_space, roc_image.getCPtr(image), image);
  }

  public static String roc_encode_image(roc_image image, String format, int quality, SWIGTYPE_p_p_unsigned_char buffer, SWIGTYPE_p_size_t buffer_length) {
    return rocJNI.roc_encode_image(roc_image.getCPtr(image), image, format, quality, SWIGTYPE_p_p_unsigned_char.getCPtr(buffer), SWIGTYPE_p_size_t.getCPtr(buffer_length));
  }

  public static String roc_convert_nv21(byte[] input_byte_array, long width, long height, roc_image image) {
    return rocJNI.roc_convert_nv21(input_byte_array, width, height, roc_image.getCPtr(image), image);
  }

  public static String roc_open_spinnaker(int index, int color_space, SWIGTYPE_p_p_roc_video_type camera) {
    return rocJNI.roc_open_spinnaker(index, color_space, SWIGTYPE_p_p_roc_video_type.getCPtr(camera));
  }

  public static String roc_is_live(SWIGTYPE_p_roc_video_type video, SWIGTYPE_p_bool is_live) {
    return rocJNI.roc_is_live(SWIGTYPE_p_roc_video_type.getCPtr(video), SWIGTYPE_p_bool.getCPtr(is_live));
  }

  public static String roc_seek_keyframe(SWIGTYPE_p_roc_video_type video, java.math.BigInteger timestamp, boolean backwards) {
    return rocJNI.roc_seek_keyframe(SWIGTYPE_p_roc_video_type.getCPtr(video), timestamp, backwards);
  }

  public static String roc_seek_frame(SWIGTYPE_p_roc_video_type video, java.math.BigInteger timestamp) {
    return rocJNI.roc_seek_frame(SWIGTYPE_p_roc_video_type.getCPtr(video), timestamp);
  }

  public static String roc_read_frame(SWIGTYPE_p_roc_video_type video, roc_image frame) {
    return rocJNI.roc_read_frame(SWIGTYPE_p_roc_video_type.getCPtr(video), roc_image.getCPtr(frame), frame);
  }

  public static String roc_close_video(SWIGTYPE_p_roc_video_type video) {
    return rocJNI.roc_close_video(SWIGTYPE_p_roc_video_type.getCPtr(video));
  }

  public static String roc_stream_start(SWIGTYPE_p_p_roc_stream_type stream, float frames_per_second, int num_worker_threads) {
    return rocJNI.roc_stream_start(SWIGTYPE_p_p_roc_stream_type.getCPtr(stream), frames_per_second, num_worker_threads);
  }

  public static String roc_stream_set_image_callback(SWIGTYPE_p_roc_stream_type stream, SWIGTYPE_p_f_p_roc_stream_type_p_void_p_q_const__char_roc_image__void image_callback, SWIGTYPE_p_void image_callback_context) {
    return rocJNI.roc_stream_set_image_callback(SWIGTYPE_p_roc_stream_type.getCPtr(stream), SWIGTYPE_p_f_p_roc_stream_type_p_void_p_q_const__char_roc_image__void.getCPtr(image_callback), SWIGTYPE_p_void.getCPtr(image_callback_context));
  }

  public static String roc_stream_set_template_callback(SWIGTYPE_p_roc_stream_type stream, SWIGTYPE_p_f_p_roc_stream_type_p_void_p_q_const__char_roc_template__void template_callback, SWIGTYPE_p_void template_callback_context, long algorithm_id, long min_size, int k, float false_detection_rate, float min_quality) {
    return rocJNI.roc_stream_set_template_callback(SWIGTYPE_p_roc_stream_type.getCPtr(stream), SWIGTYPE_p_f_p_roc_stream_type_p_void_p_q_const__char_roc_template__void.getCPtr(template_callback), SWIGTYPE_p_void.getCPtr(template_callback_context), algorithm_id, min_size, k, false_detection_rate, min_quality);
  }

  public static String roc_stream_set_video(SWIGTYPE_p_roc_stream_type stream, SWIGTYPE_p_roc_video_type video) {
    return rocJNI.roc_stream_set_video(SWIGTYPE_p_roc_stream_type.getCPtr(stream), SWIGTYPE_p_roc_video_type.getCPtr(video));
  }

  public static String roc_stream_stop(SWIGTYPE_p_p_roc_stream_type stream) {
    return rocJNI.roc_stream_stop(SWIGTYPE_p_p_roc_stream_type.getCPtr(stream));
  }

  public static String roc_stream_set_frame_rate(SWIGTYPE_p_roc_stream_type stream, float frames_per_second) {
    return rocJNI.roc_stream_set_frame_rate(SWIGTYPE_p_roc_stream_type.getCPtr(stream), frames_per_second);
  }

  public static boolean roc_stream_is_paused(SWIGTYPE_p_roc_stream_type stream) {
    return rocJNI.roc_stream_is_paused(SWIGTYPE_p_roc_stream_type.getCPtr(stream));
  }

  public static String roc_stream_set_paused(SWIGTYPE_p_roc_stream_type stream, boolean paused) {
    return rocJNI.roc_stream_set_paused(SWIGTYPE_p_roc_stream_type.getCPtr(stream), paused);
  }

  public static String roc_stream_get_fps(SWIGTYPE_p_roc_stream_type stream, SWIGTYPE_p_float fps) {
    return rocJNI.roc_stream_get_fps(SWIGTYPE_p_roc_stream_type.getCPtr(stream), SWIGTYPE_p_float.getCPtr(fps));
  }

  public static String roc_stream_add_image(SWIGTYPE_p_roc_stream_type stream, roc_image image) {
    return rocJNI.roc_stream_add_image(SWIGTYPE_p_roc_stream_type.getCPtr(stream), roc_image.getCPtr(image), image);
  }

  public static String roc_stream_sync(SWIGTYPE_p_roc_stream_type stream, java.math.BigInteger timestamp) {
    return rocJNI.roc_stream_sync(SWIGTYPE_p_roc_stream_type.getCPtr(stream), timestamp);
  }

  public static String roc_get_thumbnail_parameters(SWIGTYPE_p_int width, SWIGTYPE_p_int height, SWIGTYPE_p_float scale, SWIGTYPE_p_float quality) {
    return rocJNI.roc_get_thumbnail_parameters(SWIGTYPE_p_int.getCPtr(width), SWIGTYPE_p_int.getCPtr(height), SWIGTYPE_p_float.getCPtr(scale), SWIGTYPE_p_float.getCPtr(quality));
  }

  public static String roc_set_thumbnail_parameters(int width, int height, float scale, float quality) {
    return rocJNI.roc_set_thumbnail_parameters(width, height, scale, quality);
  }

  public static String roc_preload(long algorithm_id) {
    return rocJNI.roc_preload(algorithm_id);
  }

  public static String roc_represent(roc_image image, long algorithm_id, long min_size, int k, float false_detection_rate, float min_quality, roc_template templates) {
    return rocJNI.roc_represent(roc_image.getCPtr(image), image, algorithm_id, min_size, k, false_detection_rate, min_quality, roc_template.getCPtr(templates), templates);
  }

  public static String roc_representation_limit(SWIGTYPE_p_size_t representation_limit) {
    return rocJNI.roc_representation_limit(SWIGTYPE_p_size_t.getCPtr(representation_limit));
  }

  public static String roc_read_template_fd(int fd, roc_template template_) {
    return rocJNI.roc_read_template_fd(fd, roc_template.getCPtr(template_), template_);
  }

  public static String roc_write_template_fd(int fd, roc_template template_) {
    return rocJNI.roc_write_template_fd(fd, roc_template.getCPtr(template_), template_);
  }

  public static String roc_get_metadata(roc_template template_, String key, SWIGTYPE_p_p_char value) {
    return rocJNI.roc_get_metadata(roc_template.getCPtr(template_), template_, key, SWIGTYPE_p_p_char.getCPtr(value));
  }

  public static String roc_set_metadata(roc_template template_, String key, String value) {
    return rocJNI.roc_set_metadata(roc_template.getCPtr(template_), template_, key, value);
  }

  public static String roc_realloc_metadata(roc_template template_, long md_size) {
    return rocJNI.roc_realloc_metadata(roc_template.getCPtr(template_), template_, md_size);
  }

  public static String roc_clear_metadata(roc_template template_) {
    return rocJNI.roc_clear_metadata(roc_template.getCPtr(template_), template_);
  }

  public static String roc_get_metadata_double(roc_template template_, String key, SWIGTYPE_p_double value) {
    return rocJNI.roc_get_metadata_double(roc_template.getCPtr(template_), template_, key, SWIGTYPE_p_double.getCPtr(value));
  }

  public static String roc_set_metadata_double(roc_template template_, String key, double value) {
    return rocJNI.roc_set_metadata_double(roc_template.getCPtr(template_), template_, key, value);
  }

  public static String roc_to_base64(byte[] input_byte_array, long length, SWIGTYPE_p_p_char str) {
    return rocJNI.roc_to_base64(input_byte_array, length, SWIGTYPE_p_p_char.getCPtr(str));
  }

  public static String roc_from_base64(String str, SWIGTYPE_p_p_unsigned_char buffer, SWIGTYPE_p_size_t buffer_length) {
    return rocJNI.roc_from_base64(str, SWIGTYPE_p_p_unsigned_char.getCPtr(buffer), SWIGTYPE_p_size_t.getCPtr(buffer_length));
  }

  public static String roc_open_template_pipe(String template_pipe_file, boolean append, SWIGTYPE_p_p_roc_template_pipe_type template_pipe) {
    return rocJNI.roc_open_template_pipe(template_pipe_file, append, SWIGTYPE_p_p_roc_template_pipe_type.getCPtr(template_pipe));
  }

  public static String roc_template_pipe_transmit(roc_template_pipe_type template_pipe, roc_template template_) {
    return rocJNI.roc_template_pipe_transmit(roc_template_pipe_type.getCPtr(template_pipe), template_pipe, roc_template.getCPtr(template_), template_);
  }

  public static String roc_template_pipe_decode_protobuf(SWIGTYPE_p_unsigned_char data, long length, roc_template template_, SWIGTYPE_p_p_unsigned_char response, SWIGTYPE_p_size_t response_length) {
    return rocJNI.roc_template_pipe_decode_protobuf(SWIGTYPE_p_unsigned_char.getCPtr(data), length, roc_template.getCPtr(template_), template_, SWIGTYPE_p_p_unsigned_char.getCPtr(response), SWIGTYPE_p_size_t.getCPtr(response_length));
  }

  public static String roc_close_template_pipe(SWIGTYPE_p_p_roc_template_pipe_type template_pipe) {
    return rocJNI.roc_close_template_pipe(SWIGTYPE_p_p_roc_template_pipe_type.getCPtr(template_pipe));
  }

  public static String roc_open_gallery(String gallery_file, SWIGTYPE_p_p_roc_gallery_type gallery, SWIGTYPE_p_f_float__void progress) {
    return rocJNI.roc_open_gallery(gallery_file, SWIGTYPE_p_p_roc_gallery_type.getCPtr(gallery), SWIGTYPE_p_f_float__void.getCPtr(progress));
  }

  public static long getROC_INVALID_TEMPLATE_INDEX() {
    return rocJNI.ROC_INVALID_TEMPLATE_INDEX_get();
  }

  public static String roc_enroll(SWIGTYPE_p_roc_gallery_type gallery, roc_template template_, SWIGTYPE_p_size_t index) {
    return rocJNI.roc_enroll(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), roc_template.getCPtr(template_), template_, SWIGTYPE_p_size_t.getCPtr(index));
  }

  public static String roc_fsync(SWIGTYPE_p_roc_gallery_type gallery) {
    return rocJNI.roc_fsync(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery));
  }

  public static String roc_size(SWIGTYPE_p_roc_gallery_type gallery, SWIGTYPE_p_size_t size) {
    return rocJNI.roc_size(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), SWIGTYPE_p_size_t.getCPtr(size));
  }

  public static String roc_last_modified(SWIGTYPE_p_roc_gallery_type gallery, SWIGTYPE_p_unsigned_long_long timestamp) {
    return rocJNI.roc_last_modified(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), SWIGTYPE_p_unsigned_long_long.getCPtr(timestamp));
  }

  public static String roc_at(SWIGTYPE_p_roc_gallery_type gallery, long index, roc_template template_) {
    return rocJNI.roc_at(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), index, roc_template.getCPtr(template_), template_);
  }

  public static String roc_at_n(SWIGTYPE_p_roc_gallery_type gallery, long start_index, long n, roc_template templates) {
    return rocJNI.roc_at_n(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), start_index, n, roc_template.getCPtr(templates), templates);
  }

  public static String roc_index_for_id(SWIGTYPE_p_roc_gallery_type gallery, roc_uuid template_id, SWIGTYPE_p_size_t index) {
    return rocJNI.roc_index_for_id(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), roc_uuid.getCPtr(template_id), template_id, SWIGTYPE_p_size_t.getCPtr(index));
  }

  public static String roc_replace(SWIGTYPE_p_roc_gallery_type gallery, long index, roc_template template_) {
    return rocJNI.roc_replace(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), index, roc_template.getCPtr(template_), template_);
  }

  public static String roc_remove(SWIGTYPE_p_roc_gallery_type gallery, long index) {
    return rocJNI.roc_remove(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), index);
  }

  public static String roc_close_gallery(SWIGTYPE_p_roc_gallery_type gallery) {
    return rocJNI.roc_close_gallery(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery));
  }

  public static String roc_template_limit(SWIGTYPE_p_size_t template_limit) {
    return rocJNI.roc_template_limit(SWIGTYPE_p_size_t.getCPtr(template_limit));
  }

  public static String roc_defragment(String input, String output) {
    return rocJNI.roc_defragment(input, output);
  }

  public static String roc_validate(String gallery, boolean truncate, SWIGTYPE_p_size_t templates, SWIGTYPE_p_long_long bytes_read, SWIGTYPE_p_long_long bytes_unread) {
    return rocJNI.roc_validate(gallery, truncate, SWIGTYPE_p_size_t.getCPtr(templates), SWIGTYPE_p_long_long.getCPtr(bytes_read), SWIGTYPE_p_long_long.getCPtr(bytes_unread));
  }

  public static String roc_compare_templates(roc_template a, roc_template b, SWIGTYPE_p_float similarity) {
    return rocJNI.roc_compare_templates(roc_template.getCPtr(a), a, roc_template.getCPtr(b), b, SWIGTYPE_p_float.getCPtr(similarity));
  }

  public static String roc_compare_galleries(SWIGTYPE_p_roc_gallery_type target, SWIGTYPE_p_roc_gallery_type query, SWIGTYPE_p_float similarity_matrix) {
    return rocJNI.roc_compare_galleries(SWIGTYPE_p_roc_gallery_type.getCPtr(target), SWIGTYPE_p_roc_gallery_type.getCPtr(query), SWIGTYPE_p_float.getCPtr(similarity_matrix));
  }

  public static String roc_comparison_limit(SWIGTYPE_p_size_t comparison_limit) {
    return rocJNI.roc_comparison_limit(SWIGTYPE_p_size_t.getCPtr(comparison_limit));
  }

  public static String roc_search(SWIGTYPE_p_roc_gallery_type gallery, roc_template probe, long k, float min_similarity, roc_candidate candidates) {
    return rocJNI.roc_search(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), roc_template.getCPtr(probe), probe, k, min_similarity, roc_candidate.getCPtr(candidates), candidates);
  }

  public static String roc_knn(SWIGTYPE_p_roc_gallery_type gallery, SWIGTYPE_p_roc_gallery_type probes, long k, float min_similarity, roc_candidate neighbors, SWIGTYPE_p_f_float__void progress) {
    return rocJNI.roc_knn(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), SWIGTYPE_p_roc_gallery_type.getCPtr(probes), k, min_similarity, roc_candidate.getCPtr(neighbors), neighbors, SWIGTYPE_p_f_float__void.getCPtr(progress));
  }

  public static String roc_rerank(SWIGTYPE_p_roc_gallery_type gallery, long k, roc_candidate candidates) {
    return rocJNI.roc_rerank(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), k, roc_candidate.getCPtr(candidates), candidates);
  }

  public static String roc_open_database(String path, SWIGTYPE_p_p_roc_database_type database) {
    return rocJNI.roc_open_database(path, SWIGTYPE_p_p_roc_database_type.getCPtr(database));
  }

  public static String roc_close_database(SWIGTYPE_p_p_roc_database_type database) {
    return rocJNI.roc_close_database(SWIGTYPE_p_p_roc_database_type.getCPtr(database));
  }

  public static String roc_database_add_file(SWIGTYPE_p_roc_database_type database, String file_path, roc_hash key) {
    return rocJNI.roc_database_add_file(SWIGTYPE_p_roc_database_type.getCPtr(database), file_path, roc_hash.getCPtr(key), key);
  }

  public static String roc_database_add_link(SWIGTYPE_p_roc_database_type database, String file_path, roc_hash key) {
    return rocJNI.roc_database_add_link(SWIGTYPE_p_roc_database_type.getCPtr(database), file_path, roc_hash.getCPtr(key), key);
  }

  public static String roc_database_add_data(SWIGTYPE_p_roc_database_type database, byte[] input_byte_array, long length, roc_hash key) {
    return rocJNI.roc_database_add_data(SWIGTYPE_p_roc_database_type.getCPtr(database), input_byte_array, length, roc_hash.getCPtr(key), key);
  }

  public static String roc_database_has_key(SWIGTYPE_p_roc_database_type database, roc_hash key, SWIGTYPE_p_bool has_key) {
    return rocJNI.roc_database_has_key(SWIGTYPE_p_roc_database_type.getCPtr(database), roc_hash.getCPtr(key), key, SWIGTYPE_p_bool.getCPtr(has_key));
  }

  public static String roc_database_retrieve_file(SWIGTYPE_p_roc_database_type database, roc_hash key, SWIGTYPE_p_p_char file_path) {
    return rocJNI.roc_database_retrieve_file(SWIGTYPE_p_roc_database_type.getCPtr(database), roc_hash.getCPtr(key), key, SWIGTYPE_p_p_char.getCPtr(file_path));
  }

  public static String roc_database_retrieve_data(SWIGTYPE_p_roc_database_type database, roc_hash key, SWIGTYPE_p_p_unsigned_char data, SWIGTYPE_p_size_t length) {
    return rocJNI.roc_database_retrieve_data(SWIGTYPE_p_roc_database_type.getCPtr(database), roc_hash.getCPtr(key), key, SWIGTYPE_p_p_unsigned_char.getCPtr(data), SWIGTYPE_p_size_t.getCPtr(length));
  }

  public static String roc_database_remove(SWIGTYPE_p_roc_database_type database, roc_hash key) {
    return rocJNI.roc_database_remove(SWIGTYPE_p_roc_database_type.getCPtr(database), roc_hash.getCPtr(key), key);
  }

  public static String roc_database_first_key(SWIGTYPE_p_roc_database_type database, roc_hash first_key) {
    return rocJNI.roc_database_first_key(SWIGTYPE_p_roc_database_type.getCPtr(database), roc_hash.getCPtr(first_key), first_key);
  }

  public static String roc_database_next_key(SWIGTYPE_p_roc_database_type database, roc_hash current_key, roc_hash next_key) {
    return rocJNI.roc_database_next_key(SWIGTYPE_p_roc_database_type.getCPtr(database), roc_hash.getCPtr(current_key), current_key, roc_hash.getCPtr(next_key), next_key);
  }

  public static String roc_database_sync(SWIGTYPE_p_roc_database_type from, String to, boolean async) {
    return rocJNI.roc_database_sync(SWIGTYPE_p_roc_database_type.getCPtr(from), to, async);
  }

  public static String roc_track(SWIGTYPE_p_roc_gallery_type gallery, java.math.BigInteger max_time_separation, float min_detection_overlap, float min_similarity) {
    return rocJNI.roc_track(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), max_time_separation, min_detection_overlap, min_similarity);
  }

  public static String roc_new_tracker(SWIGTYPE_p_p_roc_tracker_type tracker) {
    return rocJNI.roc_new_tracker(SWIGTYPE_p_p_roc_tracker_type.getCPtr(tracker));
  }

  public static String roc_tracker_set_tracking_parameters(SWIGTYPE_p_roc_tracker_type tracker, long reasons, java.math.BigInteger max_time_separation, float min_detection_overlap, float min_tracking_similarity) {
    return rocJNI.roc_tracker_set_tracking_parameters(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), reasons, max_time_separation, min_detection_overlap, min_tracking_similarity);
  }

  public static String roc_tracker_set_watchlisting_parameters(SWIGTYPE_p_roc_tracker_type tracker, float min_watchlist_similarity) {
    return rocJNI.roc_tracker_set_watchlisting_parameters(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), min_watchlist_similarity);
  }

  public static String roc_tracker_add_watchlist(SWIGTYPE_p_roc_tracker_type tracker, SWIGTYPE_p_roc_gallery_type watchlist) {
    return rocJNI.roc_tracker_add_watchlist(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), SWIGTYPE_p_roc_gallery_type.getCPtr(watchlist));
  }

  public static String roc_tracker_remove_watchlist(SWIGTYPE_p_roc_tracker_type tracker, SWIGTYPE_p_roc_gallery_type watchlist) {
    return rocJNI.roc_tracker_remove_watchlist(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), SWIGTYPE_p_roc_gallery_type.getCPtr(watchlist));
  }

  public static String roc_tracker_set_represent_parameters(SWIGTYPE_p_roc_tracker_type tracker, long algorithm_id, float relative_min_size, int k, float false_detection_rate, float min_quality) {
    return rocJNI.roc_tracker_set_represent_parameters(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), algorithm_id, relative_min_size, k, false_detection_rate, min_quality);
  }

  public static String roc_tracker_set_database_parameters(SWIGTYPE_p_roc_tracker_type tracker, SWIGTYPE_p_roc_database_type database, String format, int quality, long reasons) {
    return rocJNI.roc_tracker_set_database_parameters(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), SWIGTYPE_p_roc_database_type.getCPtr(database), format, quality, reasons);
  }

  public static String roc_tracker_set_time_elapsed_threshold(SWIGTYPE_p_roc_tracker_type tracker, java.math.BigInteger milliseconds) {
    return rocJNI.roc_tracker_set_time_elapsed_threshold(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), milliseconds);
  }

  public static String roc_tracker_add_template(SWIGTYPE_p_roc_tracker_type tracker, roc_template template_) {
    return rocJNI.roc_tracker_add_template(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), roc_template.getCPtr(template_), template_);
  }

  public static String roc_tracker_add_image(SWIGTYPE_p_roc_tracker_type tracker, roc_image image, SWIGTYPE_p_roc_stream_type stream) {
    return rocJNI.roc_tracker_add_image(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), roc_image.getCPtr(image), image, SWIGTYPE_p_roc_stream_type.getCPtr(stream));
  }

  public static String roc_tracker_update_time(SWIGTYPE_p_roc_tracker_type tracker, java.math.BigInteger timestamp) {
    return rocJNI.roc_tracker_update_time(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), timestamp);
  }

  public static SWIGTYPE_p_void roc_tracker_cast(SWIGTYPE_p_roc_tracker_type tracker) {
    long cPtr = rocJNI.roc_tracker_cast(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static boolean roc_tracker_has_events(SWIGTYPE_p_roc_tracker_type tracker, java.math.BigInteger wait) {
    return rocJNI.roc_tracker_has_events(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), wait);
  }

  public static String roc_tracker_take_event(SWIGTYPE_p_roc_tracker_type tracker, roc_event event) {
    return rocJNI.roc_tracker_take_event(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), roc_event.getCPtr(event), event);
  }

  public static String roc_tracker_best_image(SWIGTYPE_p_roc_tracker_type tracker, roc_uuid person_id, roc_image image) {
    return rocJNI.roc_tracker_best_image(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker), roc_uuid.getCPtr(person_id), person_id, roc_image.getCPtr(image), image);
  }

  public static String roc_free_tracker(SWIGTYPE_p_roc_tracker_type tracker) {
    return rocJNI.roc_free_tracker(SWIGTYPE_p_roc_tracker_type.getCPtr(tracker));
  }

  public static SWIGTYPE_p_roc_identity_type roc_new_identity() {
    long cPtr = rocJNI.roc_new_identity();
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_identity_type(cPtr, false);
  }

  public static void roc_free_identity(SWIGTYPE_p_roc_identity_type identity) {
    rocJNI.roc_free_identity(SWIGTYPE_p_roc_identity_type.getCPtr(identity));
  }

  public static SWIGTYPE_p_unsigned_char roc_identity_to_buffer(SWIGTYPE_p_roc_identity_type identity, SWIGTYPE_p_size_t buffer_length) {
    long cPtr = rocJNI.roc_identity_to_buffer(SWIGTYPE_p_roc_identity_type.getCPtr(identity), SWIGTYPE_p_size_t.getCPtr(buffer_length));
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static SWIGTYPE_p_roc_identity_type roc_identity_from_buffer(SWIGTYPE_p_unsigned_char buffer, long buffer_length) {
    long cPtr = rocJNI.roc_identity_from_buffer(SWIGTYPE_p_unsigned_char.getCPtr(buffer), buffer_length);
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_identity_type(cPtr, false);
  }

  public static String roc_identity_to_file(SWIGTYPE_p_roc_identity_type identity, String file_path) {
    return rocJNI.roc_identity_to_file(SWIGTYPE_p_roc_identity_type.getCPtr(identity), file_path);
  }

  public static SWIGTYPE_p_roc_identity_type roc_identity_from_file(String file_path) {
    long cPtr = rocJNI.roc_identity_from_file(file_path);
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_identity_type(cPtr, false);
  }

  public static String roc_identity_to_json(SWIGTYPE_p_roc_identity_type identity) {
    return rocJNI.roc_identity_to_json(SWIGTYPE_p_roc_identity_type.getCPtr(identity));
  }

  public static SWIGTYPE_p_roc_identity_type roc_identity_from_json(String json) {
    long cPtr = rocJNI.roc_identity_from_json(json);
    return (cPtr == 0) ? null : new SWIGTYPE_p_roc_identity_type(cPtr, false);
  }

  public static roc_uuid roc_identity_get_person_id(SWIGTYPE_p_roc_identity_type identity) {
    return new roc_uuid(rocJNI.roc_identity_get_person_id(SWIGTYPE_p_roc_identity_type.getCPtr(identity)), true);
  }

  public static void roc_identity_set_person_id(SWIGTYPE_p_roc_identity_type identity, roc_uuid person_id) {
    rocJNI.roc_identity_set_person_id(SWIGTYPE_p_roc_identity_type.getCPtr(identity), roc_uuid.getCPtr(person_id), person_id);
  }

  public static void roc_identity_add_template_id(SWIGTYPE_p_roc_identity_type identity, roc_uuid template_id) {
    rocJNI.roc_identity_add_template_id(SWIGTYPE_p_roc_identity_type.getCPtr(identity), roc_uuid.getCPtr(template_id), template_id);
  }

  public static void roc_identity_remove_template_id(SWIGTYPE_p_roc_identity_type identity, roc_uuid template_id) {
    rocJNI.roc_identity_remove_template_id(SWIGTYPE_p_roc_identity_type.getCPtr(identity), roc_uuid.getCPtr(template_id), template_id);
  }

  public static void roc_identity_clear_template_ids(SWIGTYPE_p_roc_identity_type identity) {
    rocJNI.roc_identity_clear_template_ids(SWIGTYPE_p_roc_identity_type.getCPtr(identity));
  }

  public static boolean roc_identity_has_template_id(SWIGTYPE_p_roc_identity_type identity, roc_uuid template_id) {
    return rocJNI.roc_identity_has_template_id(SWIGTYPE_p_roc_identity_type.getCPtr(identity), roc_uuid.getCPtr(template_id), template_id);
  }

  public static long roc_identity_num_template_ids(SWIGTYPE_p_roc_identity_type identity) {
    return rocJNI.roc_identity_num_template_ids(SWIGTYPE_p_roc_identity_type.getCPtr(identity));
  }

  public static roc_uuid roc_identity_get_template_id(SWIGTYPE_p_roc_identity_type identity, long index) {
    return new roc_uuid(rocJNI.roc_identity_get_template_id(SWIGTYPE_p_roc_identity_type.getCPtr(identity), index), true);
  }

  public static void roc_identity_add_group_id(SWIGTYPE_p_roc_identity_type identity, roc_uuid group_id) {
    rocJNI.roc_identity_add_group_id(SWIGTYPE_p_roc_identity_type.getCPtr(identity), roc_uuid.getCPtr(group_id), group_id);
  }

  public static void roc_identity_remove_group_id(SWIGTYPE_p_roc_identity_type identity, roc_uuid group_id) {
    rocJNI.roc_identity_remove_group_id(SWIGTYPE_p_roc_identity_type.getCPtr(identity), roc_uuid.getCPtr(group_id), group_id);
  }

  public static void roc_identity_clear_group_ids(SWIGTYPE_p_roc_identity_type identity) {
    rocJNI.roc_identity_clear_group_ids(SWIGTYPE_p_roc_identity_type.getCPtr(identity));
  }

  public static boolean roc_identity_has_group_id(SWIGTYPE_p_roc_identity_type identity, roc_uuid group_id) {
    return rocJNI.roc_identity_has_group_id(SWIGTYPE_p_roc_identity_type.getCPtr(identity), roc_uuid.getCPtr(group_id), group_id);
  }

  public static long roc_identity_num_group_ids(SWIGTYPE_p_roc_identity_type identity) {
    return rocJNI.roc_identity_num_group_ids(SWIGTYPE_p_roc_identity_type.getCPtr(identity));
  }

  public static roc_uuid roc_identity_get_group_id(SWIGTYPE_p_roc_identity_type identity, long index) {
    return new roc_uuid(rocJNI.roc_identity_get_group_id(SWIGTYPE_p_roc_identity_type.getCPtr(identity), index), true);
  }

  public static String roc_identity_get_name(SWIGTYPE_p_roc_identity_type identity) {
    return rocJNI.roc_identity_get_name(SWIGTYPE_p_roc_identity_type.getCPtr(identity));
  }

  public static void roc_identity_set_name(SWIGTYPE_p_roc_identity_type identity, String name) {
    rocJNI.roc_identity_set_name(SWIGTYPE_p_roc_identity_type.getCPtr(identity), name);
  }

  public static java.math.BigInteger roc_identity_get_last_seen(SWIGTYPE_p_roc_identity_type identity) {
    return rocJNI.roc_identity_get_last_seen(SWIGTYPE_p_roc_identity_type.getCPtr(identity));
  }

  public static void roc_identity_set_last_seen(SWIGTYPE_p_roc_identity_type identity, java.math.BigInteger last_seen) {
    rocJNI.roc_identity_set_last_seen(SWIGTYPE_p_roc_identity_type.getCPtr(identity), last_seen);
  }

  public static String roc_identity_get_notes(SWIGTYPE_p_roc_identity_type identity) {
    return rocJNI.roc_identity_get_notes(SWIGTYPE_p_roc_identity_type.getCPtr(identity));
  }

  public static void roc_identity_set_notes(SWIGTYPE_p_roc_identity_type identity, String notes) {
    rocJNI.roc_identity_set_notes(SWIGTYPE_p_roc_identity_type.getCPtr(identity), notes);
  }

  public static String roc_cluster(SWIGTYPE_p_roc_gallery_type gallery, long k, roc_candidate neighbors, float similarity, SWIGTYPE_p_f_float__void progress) {
    return rocJNI.roc_cluster(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), k, roc_candidate.getCPtr(neighbors), neighbors, similarity, SWIGTYPE_p_f_float__void.getCPtr(progress));
  }

  public static String roc_adjudicate_knn(long gallery_size, long k, roc_candidate neighbors, roc_adjudication adjudications, long num_adjudications) {
    return rocJNI.roc_adjudicate_knn(gallery_size, k, roc_candidate.getCPtr(neighbors), neighbors, roc_adjudication.getCPtr(adjudications), adjudications, num_adjudications);
  }

  public static String roc_adjudicate_gallery(SWIGTYPE_p_roc_gallery_type gallery, roc_adjudication adjudications, long num_adjudications) {
    return rocJNI.roc_adjudicate_gallery(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), roc_adjudication.getCPtr(adjudications), adjudications, num_adjudications);
  }

  public static String roc_extend(SWIGTYPE_p_roc_gallery_type gallery, SWIGTYPE_p_roc_gallery_type probes, float threshold, boolean spawn) {
    return rocJNI.roc_extend(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), SWIGTYPE_p_roc_gallery_type.getCPtr(probes), threshold, spawn);
  }

  public static String roc_consolidate(SWIGTYPE_p_roc_gallery_type gallery, float max_similarity, long max_count) {
    return rocJNI.roc_consolidate(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), max_similarity, max_count);
  }

  public static String roc_consolidate_persons(SWIGTYPE_p_roc_gallery_type gallery, float max_similarity) {
    return rocJNI.roc_consolidate_persons(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), max_similarity);
  }

  public static String roc_set_person_id(SWIGTYPE_p_roc_gallery_type gallery, long index, roc_uuid person_id) {
    return rocJNI.roc_set_person_id(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), index, roc_uuid.getCPtr(person_id), person_id);
  }

  public static String roc_person_ids(SWIGTYPE_p_roc_gallery_type gallery, roc_uuid person_ids) {
    return rocJNI.roc_person_ids(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), roc_uuid.getCPtr(person_ids), person_ids);
  }

  public static String roc_set_server_credentials(String private_key, String certificate) {
    return rocJNI.roc_set_server_credentials(private_key, certificate);
  }

  public static String roc_get_ssl_protocols(SWIGTYPE_p_p_char protocols) {
    return rocJNI.roc_get_ssl_protocols(SWIGTYPE_p_p_char.getCPtr(protocols));
  }

  public static String roc_set_ssl_protocols(String protocol_string) {
    return rocJNI.roc_set_ssl_protocols(protocol_string);
  }

  public static String roc_get_ssl_ciphers(SWIGTYPE_p_p_char ciphers) {
    return rocJNI.roc_get_ssl_ciphers(SWIGTYPE_p_p_char.getCPtr(ciphers));
  }

  public static String roc_set_ssl_ciphers(String cipher_string) {
    return rocJNI.roc_set_ssl_ciphers(cipher_string);
  }

  public static String roc_set_server_protocol(boolean use_http) {
    return rocJNI.roc_set_server_protocol(use_http);
  }

  public static String roc_start_gallery_server(SWIGTYPE_p_roc_gallery_type gallery, int port, SWIGTYPE_p_p_roc_server_type server) {
    return rocJNI.roc_start_gallery_server(SWIGTYPE_p_roc_gallery_type.getCPtr(gallery), port, SWIGTYPE_p_p_roc_server_type.getCPtr(server));
  }

  public static String roc_gallery_server_update(SWIGTYPE_p_roc_server_type server, SWIGTYPE_p_roc_gallery_type new_gallery, String original_gallery_file) {
    return rocJNI.roc_gallery_server_update(SWIGTYPE_p_roc_server_type.getCPtr(server), SWIGTYPE_p_roc_gallery_type.getCPtr(new_gallery), original_gallery_file);
  }

  public static String roc_start_database_server(SWIGTYPE_p_roc_database_type database, int port, SWIGTYPE_p_p_roc_server_type server) {
    return rocJNI.roc_start_database_server(SWIGTYPE_p_roc_database_type.getCPtr(database), port, SWIGTYPE_p_p_roc_server_type.getCPtr(server));
  }

  public static String roc_start_template_pipe_server(roc_template_pipe_type template_pipe, int port, SWIGTYPE_p_p_roc_server_type server) {
    return rocJNI.roc_start_template_pipe_server(roc_template_pipe_type.getCPtr(template_pipe), template_pipe, port, SWIGTYPE_p_p_roc_server_type.getCPtr(server));
  }

  public static String roc_server_connections(SWIGTYPE_p_roc_server_type server, SWIGTYPE_p_int connections) {
    return rocJNI.roc_server_connections(SWIGTYPE_p_roc_server_type.getCPtr(server), SWIGTYPE_p_int.getCPtr(connections));
  }

  public static String roc_stop_server(SWIGTYPE_p_p_roc_server_type server) {
    return rocJNI.roc_stop_server(SWIGTYPE_p_p_roc_server_type.getCPtr(server));
  }

}
